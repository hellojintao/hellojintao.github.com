<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go语言解析json的方法记录</title>
    <url>/posts/f2678407.html</url>
    <content><![CDATA[<h3 id="函数一：json-Unmarshal"><a href="#函数一：json-Unmarshal" class="headerlink" title="函数一：json.Unmarshal"></a>函数一：json.Unmarshal</h3><p>函数<code>func json.Unmarshal(data []byte, v any) error</code>就是用来解析json编码的data，然后将结果保存在指针v指向的值里。</p>
<p>首先根据json数据的格式定义<code>struct</code>，用来保存解码后的值。这里首先定义了一个user结构体，然后通过<code>json.Unmarshal</code>进行解码。</p>
<p>适合数据结构不复杂的，要是几十个的，光设置结构体也很麻烦。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name    <span class="type">string</span></span><br><span class="line">	Married <span class="type">bool</span></span><br><span class="line">	Address <span class="keyword">struct</span> &#123;</span><br><span class="line">		City    <span class="type">string</span></span><br><span class="line">		Country <span class="type">string</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	user1 := <span class="string">`&#123;</span></span><br><span class="line"><span class="string">		&quot;name&quot;: &quot;tian&quot;,</span></span><br><span class="line"><span class="string">		&quot;married&quot;: false,</span></span><br><span class="line"><span class="string">		&quot;address&quot;: &#123;</span></span><br><span class="line"><span class="string">		  &quot;city&quot;: &quot;beijing&quot;,</span></span><br><span class="line"><span class="string">		  &quot;country&quot;: &quot;China&quot;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">	  &#125;`</span></span><br><span class="line">	user1Struct := &amp;user&#123;&#125;</span><br><span class="line">	json.Unmarshal([]<span class="type">byte</span>(user1), user1Struct)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;解码后的结果为：%v&quot;</span>, *user1Struct)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数二：viper-ReadConfig"><a href="#函数二：viper-ReadConfig" class="headerlink" title="函数二：viper.ReadConfig"></a>函数二：viper.ReadConfig</h3><p>先下载一下<code>go get -u github.com/spf13/viper</code></p>
<p>然后使用函数<code>func viper.ReadConfig(in io.Reader) error</code>读取数据并解析</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	user1 := <span class="string">`&#123;</span></span><br><span class="line"><span class="string">		&quot;name&quot;: &quot;tian&quot;,</span></span><br><span class="line"><span class="string">		&quot;married&quot;: false,</span></span><br><span class="line"><span class="string">		&quot;address&quot;: &#123;</span></span><br><span class="line"><span class="string">		  &quot;city&quot;: &quot;beijing&quot;,</span></span><br><span class="line"><span class="string">		  &quot;country&quot;: &quot;China&quot;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">	  &#125;`</span></span><br><span class="line">	<span class="comment">// 指定配置的类型为json</span></span><br><span class="line">	viper.SetConfigType(<span class="string">&quot;json&quot;</span>)</span><br><span class="line">	<span class="comment">// 读取数据</span></span><br><span class="line">	<span class="keyword">if</span> err := viper.ReadConfig(strings.NewReader(user1)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;数据的所有键值: %v\n&quot;</span>, viper.AllKeys())</span><br><span class="line">	fmt.Printf(<span class="string">&quot;解析后的数据：%v\n&quot;</span>, viper.AllSettings())</span><br><span class="line">	fmt.Printf(<span class="string">&quot;the type of \&quot;married\&quot; is %s\n&quot;</span>, reflect.TypeOf(viper.Get(<span class="string">&quot;married&quot;</span>)))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;The name is %s and the country is %s\n&quot;</span>, viper.Get(<span class="string">&quot;name&quot;</span>), viper.Get(<span class="string">&quot;address.country&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先要通过<code>viper.SetConfigType(&quot;json&quot;)</code>指定要解析数据的格式，否则即使<code>viper.ReadConfig</code>返回值没有报错，也得不到解析后的结果。<br>另外<code>viper.Get()</code>，<code>viper.GetString()</code>，<code>viper.GetBool()</code>等方法可以方便获取键值，同时对于键值的类型也能很好的判断。</p>
]]></content>
      <categories>
        <category>技术类</category>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言中netpoll的工作机制</title>
    <url>/posts/794f771b.html</url>
    <content><![CDATA[<h2 id="netpollGenericInit-初始化-poller"><a href="#netpollGenericInit-初始化-poller" class="headerlink" title="netpollGenericInit 初始化 poller"></a>netpollGenericInit 初始化 poller</h2><p>netpollGenericInit 保证 poller 被初始化，原子变量netpollInited保证其仅被初始化一次。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">netpollGenericInit</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> atomic.Load(&amp;netpollInited) == <span class="number">0</span> &#123;</span><br><span class="line">    lockInit(&amp;netpollInitLock, lockRankNetpollInit)</span><br><span class="line">    lock(&amp;netpollInitLock)</span><br><span class="line">    <span class="keyword">if</span> netpollInited == <span class="number">0</span> &#123;</span><br><span class="line">      netpollinit()</span><br><span class="line">      atomic.Store(&amp;netpollInited, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    unlock(&amp;netpollInitLock)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数只是一个壳，初始化逻辑封装在netpollinit函数中，依赖于平台具体的实现。linux下，init的逻辑是:</p>
<ol>
<li>通过epoll_create1系统调用创建 epoll fd</li>
<li>创建一对 read/write pipe。pipe的一个特性是向 write pipe写入数据，read pipe 就能收到同样的数据</li>
<li>通过epoll_ctl将 write pipe 对应的fd 加入到监听列表</li>
</ol>
<p>单独创建一对pipe后，runtime就能够按需中断epoll_wait，让netpoll函数立即返回。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">netpollinit</span><span class="params">()</span></span> &#123;</span><br><span class="line">  epfd = epollcreate1(_EPOLL_CLOEXEC)</span><br><span class="line">  <span class="keyword">if</span> epfd &lt; <span class="number">0</span> &#123;</span><br><span class="line">    epfd = epollcreate(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> epfd &lt; <span class="number">0</span> &#123;</span><br><span class="line">      <span class="built_in">println</span>(<span class="string">&quot;runtime: epollcreate failed with&quot;</span>, -epfd)</span><br><span class="line">      throw(<span class="string">&quot;runtime: netpollinit failed&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    closeonexec(epfd)</span><br><span class="line">  &#125;</span><br><span class="line">  r, w, errno := nonblockingPipe()</span><br><span class="line">  <span class="keyword">if</span> errno != <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;runtime: pipe failed with&quot;</span>, -errno)</span><br><span class="line">    throw(<span class="string">&quot;runtime: pipe failed&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ev := epollevent&#123;</span><br><span class="line">    events: _EPOLLIN,</span><br><span class="line">  &#125;</span><br><span class="line">  *(**<span class="type">uintptr</span>)(unsafe.Pointer(&amp;ev.data)) = &amp;netpollBreakRd</span><br><span class="line">  errno = epollctl(epfd, _EPOLL_CTL_ADD, r, &amp;ev)</span><br><span class="line">  <span class="keyword">if</span> errno != <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;runtime: epollctl failed with&quot;</span>, -errno)</span><br><span class="line">    throw(<span class="string">&quot;runtime: epollctl failed&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  netpollBreakRd = <span class="type">uintptr</span>(r)</span><br><span class="line">  netpollBreakWr = <span class="type">uintptr</span>(w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="netpoll函数"><a href="#netpoll函数" class="headerlink" title="netpoll函数"></a>netpoll函数</h2><p>netpoll函数的功能是检查可用的网络连接，它的工作流程是(happy path)：</p>
<ol>
<li><p>创建size=128的epollevent数组, 以接收事件</p>
</li>
<li><p>调用epollwait等待事件: 依赖epoll_wait系统调用</p>
</li>
<li><p>遍历epoll events，对于每个event</p>
</li>
<li><ul>
<li>创建一个pollDesc对象</li>
<li>调用netpollready，找到对应的goroutine，并将其状态从pdWait修改为pdReady</li>
</ul>
</li>
<li><p>返回pdReady状态的 goroutine列表 (gList)</p>
</li>
</ol>
<p>struct pollDesc中包含两个信号量字段，可以表示四种状态:</p>
<ol>
<li><p>pdReady: io ready信号等待被接收，goroutine可以消费这个信号，逻辑上是把信号量改成nil</p>
</li>
<li><p>pdWait: goroutine已经准备好在该信号量上阻塞，但还没有阻塞；</p>
</li>
<li><ul>
<li>如果goroutine通过gopark阻塞，状态会变成G pointer</li>
<li>如果并发的io ready信号到达，状态会改成pdReady</li>
<li>如果并发的timeout/close信号到达，状态会被改成nil</li>
</ul>
</li>
<li><p>G pointer: goroutine被阻塞在信号量上，可以被下面两类事件唤醒:</p>
</li>
<li><ul>
<li>io ready信号到来时，状态被修改好pdReady</li>
<li>timeout/close信号到来时，状态被修改为nil</li>
</ul>
</li>
<li><p>nil: 不是上面三种状态</p>
</li>
</ol>
<p>对应一些辅助函数:</p>
<ul>
<li>netpollblock 函数将goroutine状态从 pdReady 转化成 pdWait，并gopark当前goroutine</li>
<li>netpollunblock 函数将goroutine状态从 pdWait 转换为 pdReady 或 nil</li>
</ul>
<p>netpoll函数的代码在runtime/netpoll_epoll.go中，部分代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">netpoll</span><span class="params">(delay <span class="type">int64</span>)</span></span> gList &#123;</span><br><span class="line">  <span class="comment">// epoll fd 为-1，说明不需要poll</span></span><br><span class="line">  <span class="keyword">if</span> epfd == <span class="number">-1</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gList&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> waitms <span class="type">int32</span></span><br><span class="line">  <span class="comment">// ...省略一段代码</span></span><br><span class="line">  <span class="keyword">var</span> events [<span class="number">128</span>]epollevent</span><br><span class="line">retry:</span><br><span class="line">  n := epollwait(epfd, &amp;events[<span class="number">0</span>], <span class="type">int32</span>(<span class="built_in">len</span>(events)), waitms)</span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n != -_EINTR &#123;</span><br><span class="line">      <span class="built_in">println</span>(<span class="string">&quot;runtime: epollwait on fd&quot;</span>, epfd, <span class="string">&quot;failed with&quot;</span>, -n)</span><br><span class="line">      throw(<span class="string">&quot;runtime: netpoll failed&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If a timed sleep was interrupted, just return to</span></span><br><span class="line">    <span class="comment">// recalculate how long we should sleep now.</span></span><br><span class="line">    <span class="keyword">if</span> waitms &gt; <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> gList&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">goto</span> retry</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> toRun gList</span><br><span class="line">  <span class="keyword">for</span> i := <span class="type">int32</span>(<span class="number">0</span>); i &lt; n; i++ &#123;</span><br><span class="line">    ev := &amp;events[i]</span><br><span class="line">    <span class="keyword">if</span> ev.events == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> *(**<span class="type">uintptr</span>)(unsafe.Pointer(&amp;ev.data)) == &amp;netpollBreakRd &#123;</span><br><span class="line">      <span class="comment">// ... read pipe 有数据</span></span><br><span class="line">      <span class="comment">// 不需要唤醒任何goroutine</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mode <span class="type">int32</span></span><br><span class="line">    <span class="keyword">if</span> ev.events&amp;(_EPOLLIN|_EPOLLRDHUP|_EPOLLHUP|_EPOLLERR) != <span class="number">0</span> &#123;</span><br><span class="line">      mode += <span class="string">&#x27;r&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ev.events&amp;(_EPOLLOUT|_EPOLLHUP|_EPOLLERR) != <span class="number">0</span> &#123;</span><br><span class="line">      mode += <span class="string">&#x27;w&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> mode != <span class="number">0</span> &#123;</span><br><span class="line">      pd := *(**pollDesc)(unsafe.Pointer(&amp;ev.data))</span><br><span class="line">      pd.setEventErr(ev.events == _EPOLLERR)</span><br><span class="line">      <span class="comment">// 将goroutine置为 pdReady</span></span><br><span class="line">      <span class="comment">// 并添加到toRun *gList</span></span><br><span class="line">      netpollready(&amp;toRun, pd, mode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> toRun</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>备注: netpollready 函数借助于netpollunblock修改goroutine状态，并将其加到 io ready 的 goroutine list。</p>
<p>runtime在调用 netpoll 时，通常采用的是 nonblock 模式(delay=0), 只有在 findrunnable 的最后一个环节，会检查是否有单独的M(GMP中的M)进行net polling，如果没有，会block等待delay参数指定的时间。</p>
<h2 id="netpollBreak-函数"><a href="#netpollBreak-函数" class="headerlink" title="netpollBreak 函数"></a>netpollBreak 函数</h2><p>netpollBreak函数的功能比较简单，但实现比较有意思。它和netpoll函数通过变量netpollWakeSig进行交互，由于在不同的goroutine中，所以对于该变量的操作都是原则操作。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// netpollBreak interrupts an epollwait.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">netpollBreak</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> atomic.Cas(&amp;netpollWakeSig, <span class="number">0</span>, <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> b <span class="type">byte</span></span><br><span class="line">      n := write(netpollBreakWr, unsafe.Pointer(&amp;b), <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> n == -_EINTR &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> n == -_EAGAIN &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">println</span>(<span class="string">&quot;runtime: netpollBreak write failed with&quot;</span>, -n)</span><br><span class="line">      throw(<span class="string">&quot;runtime: netpollBreak write failed&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="poll-runtime-pollOpen-函数"><a href="#poll-runtime-pollOpen-函数" class="headerlink" title="poll_runtime_pollOpen 函数"></a>poll_runtime_pollOpen 函数</h2><p>poll_runtime_pollOpen 的逻辑分为三块:</p>
<ol>
<li>给 pollDesc 分配内存</li>
<li>初始化 pollDesc 对象</li>
<li>借助于 netpollopen 注册epoll监听(netpollopen在linux下是 epoll_ctl)</li>
<li>返回 pollDesc 对象</li>
</ol>
<p>poll_runtime_pollOpen函数的实现位于 runtime/netpoll.go 中, 主要逻辑如下:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//go:linkname poll_runtime_pollOpen internal/poll.runtime_pollOpen</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">poll_runtime_pollOpen</span><span class="params">(fd <span class="type">uintptr</span>)</span></span> (*pollDesc, <span class="type">int</span>) &#123;</span><br><span class="line">  pd := pollcache.alloc()</span><br><span class="line">  lock(&amp;pd.lock)</span><br><span class="line">  wg := pd.wg.Load()</span><br><span class="line">  <span class="keyword">if</span> wg != <span class="number">0</span> &amp;&amp; wg != pdReady &#123;</span><br><span class="line">    throw(<span class="string">&quot;runtime: blocked write on free polldesc&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  rg := pd.rg.Load()</span><br><span class="line">  <span class="keyword">if</span> rg != <span class="number">0</span> &amp;&amp; rg != pdReady &#123;</span><br><span class="line">    throw(<span class="string">&quot;runtime: blocked read on free polldesc&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  pd.fd = fd</span><br><span class="line">  <span class="comment">// ... 省略部分初始化逻辑</span></span><br><span class="line">  unlock(&amp;pd.lock)</span><br><span class="line"></span><br><span class="line">  errno := netpollopen(fd, pd)</span><br><span class="line">  <span class="keyword">if</span> errno != <span class="number">0</span> &#123;</span><br><span class="line">    pollcache.free(pd)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="type">int</span>(errno)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pd, <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位于net/netpoll_epoll.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">netpollopen</span><span class="params">(fd <span class="type">uintptr</span>, pd *pollDesc)</span></span> <span class="type">int32</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> ev epollevent</span><br><span class="line">  ev.events = _EPOLLIN | _EPOLLOUT | _EPOLLRDHUP | _EPOLLET</span><br><span class="line">  *(**pollDesc)(unsafe.Pointer(&amp;ev.data)) = pd</span><br><span class="line">  <span class="keyword">return</span> -epollctl(epfd, _EPOLL_CTL_ADD, <span class="type">int32</span>(fd), &amp;ev)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="poll-runtime-pollWait-函数"><a href="#poll-runtime-pollWait-函数" class="headerlink" title="poll_runtime_pollWait 函数"></a>poll_runtime_pollWait 函数</h2><p>poll_runtime_pollWait 函数只是对 netpollblock 函数的封装，增加了容错。值得注意的是，该函数不是runtime触发的，而是用户程序触发的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">poll_runtime_pollWait</span><span class="params">(pd *pollDesc, mode <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  errcode := netpollcheckerr(pd, <span class="type">int32</span>(mode))</span><br><span class="line">  <span class="keyword">if</span> errcode != pollNoError &#123;</span><br><span class="line">    <span class="keyword">return</span> errcode</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// As for now only Solaris, illumos, and AIX use level-triggered IO.</span></span><br><span class="line">  <span class="keyword">if</span> GOOS == <span class="string">&quot;solaris&quot;</span> || GOOS == <span class="string">&quot;illumos&quot;</span> || GOOS == <span class="string">&quot;aix&quot;</span> &#123;</span><br><span class="line">    netpollarm(pd, mode)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> !netpollblock(pd, <span class="type">int32</span>(mode), <span class="literal">false</span>) &#123;</span><br><span class="line">    errcode = netpollcheckerr(pd, <span class="type">int32</span>(mode))</span><br><span class="line">    <span class="keyword">if</span> errcode != pollNoError &#123;</span><br><span class="line">      <span class="keyword">return</span> errcode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Can happen if timeout has fired and unblocked us,</span></span><br><span class="line">    <span class="comment">// but before we had a chance to run, timeout has been reset.</span></span><br><span class="line">    <span class="comment">// Pretend it has not happened and retry.</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pollNoError</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面我们看下用户程序如何触发 poll_runtime_xxx 系列的函数。首先，套接字分为两类：LISTEN套接字(Server套接字) 和 ESTABLISHED套接字(TCPConn)；</p>
<ul>
<li>LISTEN 套接字通过系统调用 socket/bind/listen 去生成；</li>
<li>ESTABLISHED 套接字通过系统调用 accept 去生成；</li>
</ul>
<h2 id="LISTEN套接字-Server套接字"><a href="#LISTEN套接字-Server套接字" class="headerlink" title="LISTEN套接字(Server套接字)"></a>LISTEN套接字(Server套接字)</h2><p>从http server的角度来看，LISTEN套接字注册epoll监听的链路如下:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// net/http/server.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(addr <span class="type">string</span>, handler Handler)</span></span> <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// net/http/server.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span></span> ListenAndServe() <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// net/dial.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Listen</span><span class="params">(network, address <span class="type">string</span>)</span></span> (Listener, <span class="type">error</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> lc ListenConfig</span><br><span class="line">  <span class="keyword">return</span> lc.Listen(context.Background(), network, address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// net/dial.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lc *ListenConfig)</span></span> Listen(ctx context.Context, network, address <span class="type">string</span>) (Listener, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// net/tcpsock_posix.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sl *sysListener)</span></span> listenTCP(ctx context.Context, laddr *TCPAddr) (*TCPListener, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// net/ipsock_posix.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">internetSocket</span><span class="params">(ctx context.Context, net <span class="type">string</span>, laddr, raddr sockaddr, sotype, proto <span class="type">int</span>, mode <span class="type">string</span>, ctrlFn <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>, syscall.RawConn)</span></span> <span class="type">error</span>) (fd *netFD, err <span class="type">error</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// net/sock_posix.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">socket</span><span class="params">(ctx context.Context, net <span class="type">string</span>, family, sotype, proto <span class="type">int</span>, ipv6only <span class="type">bool</span>, laddr, raddr sockaddr, ctrlFn <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>, syscall.RawConn)</span></span> <span class="type">error</span>) (fd *netFD, err <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// net/sock_posix.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fd *netFD)</span></span> listenStream(laddr sockaddr, backlog <span class="type">int</span>, ctrlFn <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>, <span class="type">string</span>, syscall.RawConn)</span></span> <span class="type">error</span>)</span><br><span class="line">  <span class="keyword">if</span> err = fd.init(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// net/fd_unix.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fd *netFD)</span></span> init() <span class="type">error</span> &#123;</span><br><span class="line">  <span class="comment">// fd.pfd 类型是 poll.FD</span></span><br><span class="line">  <span class="keyword">return</span> fd.pfd.Init(fd.net, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// internal/poll/fd_unix.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fd *FD)</span></span> Init(net <span class="type">string</span>, pollable <span class="type">bool</span>) <span class="type">error</span> &#123;</span><br><span class="line">  <span class="comment">// We don&#x27;t actually care about the various network types.</span></span><br><span class="line">  <span class="keyword">if</span> net == <span class="string">&quot;file&quot;</span> &#123;</span><br><span class="line">    fd.isFile = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> !pollable &#123;</span><br><span class="line">    fd.isBlocking = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  err := fd.pd.init(fd)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// If we could not initialize the runtime poller,</span></span><br><span class="line">    <span class="comment">// assume we are using blocking mode.</span></span><br><span class="line">    fd.isBlocking = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// internal/poll/fd_poll_runtime.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pd *pollDesc)</span></span> init(fd *FD) <span class="type">error</span> &#123;</span><br><span class="line">  serverInit.Do(runtime_pollServerInit)</span><br><span class="line">  ctx, errno := runtime_pollOpen(<span class="type">uintptr</span>(fd.Sysfd))</span><br><span class="line">  <span class="keyword">if</span> errno != <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> errnoErr(syscall.Errno(errno))</span><br><span class="line">  &#125;</span><br><span class="line">  pd.runtimeCtx = ctx</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ESTABLISHED套接字-TCPConn"><a href="#ESTABLISHED套接字-TCPConn" class="headerlink" title="ESTABLISHED套接字(TCPConn)"></a>ESTABLISHED套接字(TCPConn)</h2><p>http server accept 新的tcp conn</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// net/http/server.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span></span> Serve(l net.Listener) <span class="type">error</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    rw, err := l.Accept()</span><br><span class="line"></span><br><span class="line"><span class="comment">// net/tcpsock.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *TCPListener)</span></span> Accept() (Conn, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ln *TCPListener)</span></span> accept() (*TCPConn, <span class="type">error</span>) &#123;</span><br><span class="line">  fd, err := ln.fd.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment">// net/fd_posix.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fd *netFD)</span></span> accept() (netfd *netFD, err <span class="type">error</span>) &#123;</span><br><span class="line">  d, rsa, errcall, err := fd.pfd.Accept()</span><br><span class="line">  <span class="comment">// 省略部分代码</span></span><br><span class="line">  <span class="keyword">if</span> err = netfd.init(); err != <span class="literal">nil</span></span><br><span class="line">  <span class="comment">// 省略部分代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// internal/poll/fd_unix.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fd *FD)</span></span> Init(net <span class="type">string</span>, pollable <span class="type">bool</span>) <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// internal/poll/fd_poll_runtime.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pd *pollDesc)</span></span> init(fd *FD) <span class="type">error</span></span><br></pre></td></tr></table></figure>

<h2 id="关于-net-netFD-struct"><a href="#关于-net-netFD-struct" class="headerlink" title="关于 net.netFD struct"></a>关于 net.netFD struct</h2><p>netFD是对套接字(网络文件描述符)的封装。对于Server套接字而言，可以通过accept方法从Server套接字(LISTEN套接字)获取新的TCP连接(或ESTABLISHED套接字)。Linux的accept系统调用返回的ESTABLISHED套接字是一个int值，通过 newFD 和 init 函数将其封装为一个完整的 netFD结构，后面会被封装为一个net.TCPConn。</p>
<p>对于操作系统而言，LISTEN套接字和ESTABLISHED套接字都只是一个int类型的文件描述符，没有本质区别。系统调用accept和read都是从套接字读取数据，所以epoll里会放到一个batch里去监听。</p>
<p>这是 netFD 的定义和accept方法的实现：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Network file descriptor.</span></span><br><span class="line"><span class="keyword">type</span> netFD <span class="keyword">struct</span> &#123;</span><br><span class="line">  pfd poll.FD</span><br><span class="line"></span><br><span class="line">  <span class="comment">// immutable until Close</span></span><br><span class="line">  family      <span class="type">int</span></span><br><span class="line">  sotype      <span class="type">int</span></span><br><span class="line">  isConnected <span class="type">bool</span> <span class="comment">// handshake completed or use of association with peer</span></span><br><span class="line">  net         <span class="type">string</span></span><br><span class="line">  laddr       Addr</span><br><span class="line">  raddr       Addr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fd *netFD)</span></span> accept() (netfd *netFD, err <span class="type">error</span>) &#123;</span><br><span class="line">  d, rsa, errcall, err := fd.pfd.Accept()</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> errcall != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">      err = wrapSyscallError(errcall, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> netfd, err = newFD(d, fd.family, fd.sotype, fd.net); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    poll.CloseFunc(d)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> err = netfd.init(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    netfd.Close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  lsa, _ := syscall.Getsockname(netfd.pfd.Sysfd)</span><br><span class="line">  netfd.setAddr(netfd.addrFunc()(lsa), netfd.addrFunc()(rsa))</span><br><span class="line">  <span class="keyword">return</span> netfd, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>net.netFD 依赖 poll.FD 实现poll功能。区别正如名字所展示，net.netFD是封装了网络相关的功能，而 poll.FD是更为通用的FD，封装了文件描述符上能进行的操作。其定义如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FD is a file descriptor. The net and os packages use this type as a</span></span><br><span class="line"><span class="comment">// field of a larger type representing a network connection or OS file.</span></span><br><span class="line"><span class="keyword">type</span> FD <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="comment">// Lock sysfd and serialize access to Read and Write methods.</span></span><br><span class="line">  fdmu fdMutex</span><br><span class="line"></span><br><span class="line">  <span class="comment">// System file descriptor. Immutable until Close.</span></span><br><span class="line">  Sysfd <span class="type">int</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// I/O poller.</span></span><br><span class="line">  pd pollDesc</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Writev cache.</span></span><br><span class="line">  iovecs *[]syscall.Iovec</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Semaphore signaled when file is closed.</span></span><br><span class="line">  csema <span class="type">uint32</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Non-zero if this file has been set to blocking mode.</span></span><br><span class="line">  isBlocking <span class="type">uint32</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whether this is a streaming descriptor, as opposed to a</span></span><br><span class="line">  <span class="comment">// packet-based descriptor like a UDP socket. Immutable.</span></span><br><span class="line">  IsStream <span class="type">bool</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whether a zero byte read indicates EOF. This is false for a</span></span><br><span class="line">  <span class="comment">// message based socket connection.</span></span><br><span class="line">  ZeroReadIsEOF <span class="type">bool</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whether this is a file rather than a network socket.</span></span><br><span class="line">  isFile <span class="type">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>poll.FD 依赖 poll.pollDesc 实现poll功能。poll.pollDesc 实现了 IO polling 的功能。poll.pollDesc 有一系列的方法，比如 init、wait、close、prepare 等都是对 runtime_pollXXX 函数系列的封装，下面诗pollDesc的部分逻辑:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> pollDesc <span class="keyword">struct</span> &#123;</span><br><span class="line">  runtimeCtx <span class="type">uintptr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> serverInit sync.Once</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pd *pollDesc)</span></span> init(fd *FD) <span class="type">error</span> &#123;</span><br><span class="line">  serverInit.Do(runtime_pollServerInit)</span><br><span class="line">  ctx, errno := runtime_pollOpen(<span class="type">uintptr</span>(fd.Sysfd))</span><br><span class="line">  <span class="keyword">if</span> errno != <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> errnoErr(syscall.Errno(errno))</span><br><span class="line">  &#125;</span><br><span class="line">  pd.runtimeCtx = ctx</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术类</category>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的npm依赖环境以及博客部署备忘录</title>
    <url>/posts/28dcdc4c.html</url>
    <content><![CDATA[<h3 id="pug-以及-stylus-的渲染器"><a href="#pug-以及-stylus-的渲染器" class="headerlink" title="pug 以及 stylus 的渲染器"></a>pug 以及 stylus 的渲染器</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer-pug</span> hexo<span class="literal">-renderer-stylus</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>

<h3 id="butterfly开启本地搜索"><a href="#butterfly开启本地搜索" class="headerlink" title="butterfly开启本地搜索"></a>butterfly开启本地搜索</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator-search</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>

<h3 id="开启hexo-abbrlink文章链接"><a href="#开启hexo-abbrlink文章链接" class="headerlink" title="开启hexo-abbrlink文章链接"></a>开启hexo-abbrlink文章链接</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-abbrlink</span> <span class="literal">--save</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span>     <span class="comment"># 将原来文章的地址修改为这个</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 并添加如下配置：</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>      <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>        <span class="comment">#support dec(default) and hex</span></span><br><span class="line">  <span class="attr">drafts:</span> <span class="literal">false</span>   <span class="comment">#(true)Process draft,(false)Do not process draft. false(default) </span></span><br></pre></td></tr></table></figure>

<h3 id="部署必备插件"><a href="#部署必备插件" class="headerlink" title="部署必备插件"></a>部署必备插件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>

<h3 id="开启百度站长主动推送文章链接"><a href="#开启百度站长主动推送文章链接" class="headerlink" title="开启百度站长主动推送文章链接"></a>开启百度站长主动推送文章链接</h3><p>安装依赖</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-baidu-url-submit</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>

<p>修改配置文件<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">200</span>  <span class="comment">#比如200，代表提交最新的200个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">www.kimtoli.com</span> <span class="comment"># 在百度站长平台中注册的域名，这个改为你自己的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">your_token</span> <span class="comment"># 百度站长token字段</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 新链接会保存在此文本文档里（文本文件的文件名）</span></span><br></pre></td></tr></table></figure>

<p>加入新的deploy项</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:XXX/XXX.github.io.git</span>  <span class="comment"># Github地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span>  <span class="comment"># 这一行是新增的配置</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术类</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>一些很有用的JavaScript代码</title>
    <url>/posts/bbf49370.html</url>
    <content><![CDATA[<h3 id="获取浏览器cookie值"><a href="#获取浏览器cookie值" class="headerlink" title="获取浏览器cookie值"></a>获取浏览器cookie值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cookie = name =<span class="string">`; <span class="subst">$&#123;<span class="variable language_">document</span>.cookie&#125;</span>`</span>.<span class="title function_">split</span>(<span class="string">`; <span class="subst">$&#123;name&#125;</span>=`</span>).<span class="title function_">pop</span>().<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>).<span class="title function_">shift</span>();</span><br><span class="line"><span class="title function_">cookie</span>(<span class="string">&#x27;_ga&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="将RGB转换为16进制"><a href="#将RGB转换为16进制" class="headerlink" title="将RGB转换为16进制"></a>将RGB转换为16进制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">rgbToHex</span> = (<span class="params">r, g, b</span>) =&gt;</span><br><span class="line"><span class="string">&quot;#&quot;</span> + ((<span class="number">1</span> &lt;&lt; <span class="number">24</span>) + (r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_">rgbToHex</span>(<span class="number">0</span>, <span class="number">51</span>, <span class="number">255</span>);</span><br></pre></td></tr></table></figure>

<h3 id="复制到剪切板"><a href="#复制到剪切板" class="headerlink" title="复制到剪切板"></a>复制到剪切板</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> copyToClipboard = (text) =navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(text);</span><br><span class="line"><span class="title function_">copyToClipboard</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="检查日期是否有效"><a href="#检查日期是否有效" class="headerlink" title="检查日期是否有效"></a>检查日期是否有效</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isDateValid = (...val) =!<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(...val).<span class="title function_">valueOf</span>());</span><br><span class="line"><span class="title function_">isDateValid</span>(<span class="string">&quot;December 17, 1995 03:24:00&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>找出一年中的某一天（即给出一个日期，程序给出属于本年的第多少天）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">dayOfYear</span> = (<span class="params">date</span>) =&gt;</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>((date - <span class="keyword">new</span> <span class="title class_">Date</span>(date.<span class="title function_">getFullYear</span>(), <span class="number">0</span>, <span class="number">0</span>)) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">dayOfYear</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="comment">// Result: 272</span></span><br></pre></td></tr></table></figure>

<h3 id="将字符串首字母大写"><a href="#将字符串首字母大写" class="headerlink" title="将字符串首字母大写"></a>将字符串首字母大写</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalize = str =str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + str.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">capitalize</span>(<span class="string">&quot;follow for more&quot;</span>)</span><br><span class="line"><span class="comment">// Result: Follow for more</span></span><br></pre></td></tr></table></figure>

<h3 id="计算两个日期之间相差的天数"><a href="#计算两个日期之间相差的天数" class="headerlink" title="计算两个日期之间相差的天数"></a>计算两个日期之间相差的天数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dayDif = (date1, date2) =<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(date1.<span class="title function_">getTime</span>() - date2.<span class="title function_">getTime</span>()) / <span class="number">86400000</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">dayDif</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2020-10-21&quot;</span>), <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2021-10-22&quot;</span>))</span><br><span class="line"><span class="comment">// Result: 366</span></span><br></pre></td></tr></table></figure>

<h3 id="清除所有cookie"><a href="#清除所有cookie" class="headerlink" title="清除所有cookie"></a>清除所有cookie</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clearCookies = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>).<span class="title function_">forEach</span>(cookie =<span class="variable language_">document</span>.<span class="property">cookie</span> = cookie.<span class="title function_">replace</span>(<span class="regexp">/^ +/</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/=.\*/</span>, <span class="string">`=;expires=<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>).toUTCString()&#125;</span>;path=/`</span>));</span><br></pre></td></tr></table></figure>

<h3 id="生成随机16进制"><a href="#生成随机16进制" class="headerlink" title="生成随机16进制"></a>生成随机16进制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomHex = () =<span class="string">`#<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">0xffffff</span>).toString(<span class="number">16</span>).padEnd(<span class="number">6</span>, <span class="string">&quot;0&quot;</span>)&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">randomHex</span>());</span><br><span class="line"><span class="comment">// Result: #92b008</span></span><br></pre></td></tr></table></figure>

<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> removeDuplicates = (arr) =[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">removeDuplicates</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>]));</span><br><span class="line"><span class="comment">// Result: [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>

<h3 id="从URL中获取查询参数"><a href="#从URL中获取查询参数" class="headerlink" title="从URL中获取查询参数"></a>从URL中获取查询参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getParameters = (<span class="variable constant_">URL</span>) =&#123;</span><br><span class="line"><span class="variable constant_">URL</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;&#x27;</span> + <span class="built_in">decodeURI</span>(<span class="variable constant_">URL</span>.<span class="title function_">split</span>(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>]).<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;\\&quot;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&quot;,&quot;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&#x27;&quot;:&quot;&#x27;</span>) +<span class="string">&#x27;&quot;&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable constant_">URL</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getParameters</span>(<span class="variable language_">window</span>.<span class="property">location</span>)</span><br><span class="line"><span class="comment">// Result: &#123; search : &quot;easy&quot;, page : 3 &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="从日期中获取“时分秒”格式的时间"><a href="#从日期中获取“时分秒”格式的时间" class="headerlink" title="从日期中获取“时分秒”格式的时间"></a>从日期中获取“时分秒”格式的时间</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timeFromDate = date =date.<span class="title function_">toTimeString</span>().<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">timeFromDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2021</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">30</span>, <span class="number">0</span>)));</span><br><span class="line"><span class="comment">// Result: &quot;17:30:00&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="确认奇偶数"><a href="#确认奇偶数" class="headerlink" title="确认奇偶数"></a>确认奇偶数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过数据%2来判断并返回布尔类型</span></span><br><span class="line"><span class="keyword">const</span> isEven = num =num % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// Result: True</span></span><br></pre></td></tr></table></figure>

<h3 id="回到顶部（适用于网页右下角快捷返回功能）"><a href="#回到顶部（适用于网页右下角快捷返回功能）" class="headerlink" title="回到顶部（适用于网页右下角快捷返回功能）"></a>回到顶部（适用于网页右下角快捷返回功能）</h3><p>//通过将x、y设置为0来实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> goToTop = () =<span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">goToTop</span>();</span><br></pre></td></tr></table></figure>

<h3 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reverse = str =str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="title function_">reverse</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="comment">// Result: &#x27;dlrow olleh&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="检查数组是否为空"><a href="#检查数组是否为空" class="headerlink" title="检查数组是否为空"></a>检查数组是否为空</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过对数组长度判断来确定是否为空</span></span><br><span class="line"><span class="keyword">const</span> isNotEmpty = arr =<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) &amp;&amp; arr.<span class="property">length</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isNotEmpty</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// Result: true</span></span><br></pre></td></tr></table></figure>

<h3 id="获取用户选定的文本"><a href="#获取用户选定的文本" class="headerlink" title="获取用户选定的文本"></a>获取用户选定的文本</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getSelectedText = () =<span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">getSelectedText</span>();</span><br></pre></td></tr></table></figure>

<h3 id="打乱数组"><a href="#打乱数组" class="headerlink" title="打乱数组"></a>打乱数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shuffleArray = (arr) =arr.<span class="title function_">sort</span>(() =<span class="number">0.5</span> - <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">shuffleArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]));</span><br><span class="line"><span class="comment">// Result: [ 1, 4, 3, 2 ]</span></span><br></pre></td></tr></table></figure>

<h3 id="检查用户是否处于暗模式"><a href="#检查用户是否处于暗模式" class="headerlink" title="检查用户是否处于暗模式"></a>检查用户是否处于暗模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isDarkMode = <span class="variable language_">window</span>.<span class="property">matchMedia</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class="property">matches</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isDarkMode) <span class="comment">// Result: True or False</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术类</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>江怀安对我的大献殷勤不为所动，可我想要的只能是我的，直到他被我绑在床榻之上</title>
    <url>/posts/bdf69bea.html</url>
    <content><![CDATA[<p>【明月照沟渠】<br>江怀安十二岁的时候，我就对人家一见倾心。<br>面对我的大献殷勤他不为所动，坚贞不屈的模样，在众人前大喊：“江某此生，宁为庙里僧，不上公主塌”<br>我笑的云淡风轻，江怀安不懂我，我想要的，只能是我的。<br>直到他被我绑在床榻之上。<br>我在上，他在下。<br>我的胞妹他的心上人在门外望。<br>“喊啊！好让门外人听的清楚些。”<br>1、<br>十岁之前我都在院门口耍大刀，活在我阿爷给我编的女侠小说梦里。<br>十岁，他顺着造反队伍做了皇帝。<br>我之前吃的都是糠噎菜，坐我阿爷大腿上，读的不是圣贤书，学的骂大娘。<br>我第一次见到江怀安，就对他颇感兴趣。<br>寒冬腊月。<br>我坐着阿爷的骏马上，居高临下，疾驰而来卷起沙土。<br>惹得底下的人被咳了几声，待沙尘散去。<br>我看清了脸，他生的白嫩，双眼清澈透亮，像沙漠里的星子。<br>亮的能把人吸进去。<br>我阿爷抱着我，目光冷漠的扫过江怀安，语气不善：“哪家的姑娘，经不起风沙，可得抓稳了，别让老子的马蹄子踹着你。”<br>“阿枝，我儿，还要比你黑些，壮些。”<br>2、<br>江怀安的爹谄媚的笑着跟我和阿爷介绍：“陛下、公主恕罪，在下小儿姓江字怀安，十二实岁，竖子年幼还望海涵。”<br>“江怀安？”我在心里默念着他的名字，然后呲着牙朝他咧嘴笑：“你生的可真好看！”<br>他不回话，一双漆黑眸子不卑不亢的看着我，疏远又莫离。<br>他爹使劲儿推了一把，又在他后背狠狠打上几下，恶狠狠的骂：“公主抬举你，你还不跪谢。”<br>江怀安不为所动，他爹从袖子里抻出一长跟细柳条枝，狠狠在他背上抽打。<br>他愣是一滴泪没留。<br>“不要，不要打他！”<br>小时候，我不听话，出院子，瞎溜达着玩，被人贩子拐走过。<br>爹从城里买了肉赶摊子回来的早，举起刀“什么杂碎，敢偷老子的儿？！”<br>赶的那人屁滚尿流。<br>娘回来打我拿的就是细柳条抽的我，疼的我兹拉瓦拉叫。<br>3、<br>“不要，不要打他！”<br>我下了马，跑过去推开那打人的爹。<br>将江怀安挡在身前。<br>“你疼不疼”<br>他偏过头，视线对上我的眼神，语气不容置喙：“多管闲事”<br>我愣了楞，收回了手，嘴角勾起一个弧度。<br>“打死算了！”<br>4、<br>“哈哈哈哈哈哈，刘大人，莫怪，我儿说话就是直冲“<br>“枝儿，上马，回宫。”<br>十二岁我做了公主，他做了我的臣子。<br>5、<br>我贪图美色日日泡在江府。<br>送书、送礼，天天缠着，我要让全京城的世家小姐都知道。<br>他—江怀安，是我晋阳公主沈枝意的。<br>开始的时候是惊恐冷漠至极，一次一次碍着身份有别的婉拒。<br>“公主，在下无能，无闲，需得读书、习字考功名，报效朝廷，难入公主青眼。”<br>我只是笑，偏着头看着他：“爱卿，自古男子无才，英俊清秀便是德，这点你已经做的够好了。”<br>为了让他分辨出我与旁的女子不同，我劳心费神苦追一年，可他的心比三月飞雪还冷，不为所动。<br>我与华阳谈心，哀声叹气，我问她：“暖暖，我是真的对江怀安一见倾心，想让他做我驸马，你说他是真不想还是装不想？”<br>华阳是小我四岁的妹妹，生得貌美，言行举止不刻板。<br>出口成章是先生口中读书的好料子，八面玲珑惹得满朝文武群臣追捧。<br>经常吐出一些我听不懂的词。<br>她教我：“沈枝意，你一个公主怎么活得这么窝囊，送钱又送礼，软的不行你就硬来呗”<br>软的不行，我就来硬的？<br>她活泼的朝我眨眨眼：“就讷！”<br>啥？！<br>“霸王硬上弓呗，被破了身的男的，都不值钱了，哪家千金还敢要他？还不得乖乖跟你回府？！”<br>6、<br>我听进去了。<br>他读书。<br>我便骑马，骑得还是他这匹15岁秀色可餐的小马。<br>即便在不情愿，他也照做，逼的他嘴里振振有词：“沈枝意，像你这般女子，我江怀安这辈子不会娶。”<br>“无妨，本公主纳你入赘便可。”<br>一巴掌打在他屁股上：“快点，驾。”<br>他红着个大脸梗着脖子，一言不发，又驮着我，走了一圈又一圈。<br>我以为这一走就是一辈子。<br>直到沈怀安见到了华阳。<br>他告诉我：“沈枝意，不要再纠缠了，我有心仪之人了，你想让她怎么看我，公主殿下养在江府的面首吗？你怎么样才能放过我？！”<br>回宫之后，我食之无味，坐在院子里一遍又一遍的写着“江怀安”的名字。<br>“我病了，暖暖。”<br>华阳说我这叫失恋了。<br>反正我“总角之宴，言笑晏晏”的美梦，碎的稀里哗啦。<br>7、<br>江怀安最喜欢和华阳凑一起。<br>我在院子里耍三套大刀心法，看一部话本子，她两才能从房间出来。<br>两人关上门子，也不知道谈什么。<br>反正每次华阳出来，都会羞涩的捂着嘴笑，然后跑到我身边，扑我怀里撒娇直嚷着回家。<br>江怀安站到一旁耐心的叮嘱：“小心，别摔到。”<br>语气是我从未见过的温柔，我还以为他是天生的性子冷淡，没想到是唯独面对我，对别人他也可以柔情似水。<br>我心里不舒服，说不上来哪难受。<br>所以每次临走时，我都会拽着江怀安的衣领子，到偏僻角落。<br>“今天多聊了半个时辰。”<br>他脸红成一颗大苹果，不敢看我。<br>我绕有兴趣捏起他的下巴：“要我亲自动手吗？”<br>他抬眼，扒拉掉我的手，像一只会咆哮的小兽，湿了眼眶：“沈枝意！你粗鄙不堪!”<br>我心情愉悦的哼了几声。<br>他无奈凑上前贴上我的脸，然后脸变得更红。<br>甩甩衣袖，往外走，任我怎么叫也不回头，是只倔强的小马驹。<br>每次都闹一番。<br>读书人还是要带点自尊和骨气在身上的，本公主很欣赏。<br>我满意的回味，彪上华阳的胳膊大喊一句：“本公主回宫喽”<br>华阳上下打量我的雀跃：“沈枝意，你又欺负江怀安？”<br>“那又如何反正他江怀安，本该是我夫，早晚都是我夫，只能是我夫”说这句时我在江府门外，看到了鬼鬼祟祟躲在假山后的江怀安，我笑的肆意。<br>她微微抬高了嗓音：“沈枝意，你别恋爱脑啊”<br>我蹙着眉，语重心长：“暖暖，你无人时，也应该唤我阿姐才对。”<br>后来，我才知道，江怀安未必是出来送我的。<br>我轻薄他气急败坏，捂着脸跑进屋也不是因为害羞，只是不想被喜欢的人看到自己无能的一面罢了。<br>4、<br>“就是京中学时最粗浅的女儿家，也不似你这般粗鄙不堪”<br>爱慕江怀安的世家小姐从来不在少数，这么直白又毫不留情面的还是第一个。<br>我认真反思过自己的问题，想着将来江怀安高中。<br>正房大娘子不能是个白丁。<br>我求了父皇，指派江怀安当我教课先生。<br>父皇很是欣慰，随口一句“不愧他妈的是老子闺女，就是上进。”<br>旁边的宦官咳嗽两声，父皇红着脸才觉得不妥，轻咳一声，大手一挥。<br>“国之栋梁，你悠着点！”<br>想来父皇也知道我的得行，隐晦的提醒我别玩太过，他都可以兜底。<br>我暗暗发誓，这次一定要拿下，待到假以时日，做状元夫人。<br>开始江怀安教我写字。<br>我写不明白，示意他握着我的手手把手教。<br>他锁着眉，低头作揖：“君臣有别”<br>“你要违抗皇命？”<br>“微臣不敢”<br>我欣慰的笑了，这公主身份还是有些用处的。<br>江怀安攥住我的手，指节粗粒，我细细摩擦，笑意盈盈的看向他。<br>直到把我的名字，木字旁的捺划出去一大截。<br>我轻靠怀里，听着他心脏跳的震天响，不怀好意的覆到他耳边：“怀安哥哥，你乱了。”<br>他瞧着我愣了一瞬，耳根子红的像山楂，好看的紧，垂着头：“是”<br>5、<br>自那以后，我变得一发不可收拾。<br>无所不用其极。<br>挑着时辰，沐浴更衣，支开宫女婆子，让他红着脸给我递小衣。<br>“怀安哥哥，我这衣服上绣的牡丹好看吗”<br>他把着小衣，攥出褶子，眸色晦暗不明，脸红成一个可口的大苹果。<br>像是从牙缝里挤出来俩个字<br>“好看”<br>我：“什么好看”<br>“牡丹”<br>我没忍住嗤笑出来，在水里扑腾的欢。<br>“怀安哥哥，你可看好了？那上边绣的不是牡丹，是芍药。”<br>我又缠着他给我梳发，湿漉漉的眼眸回头看，夹着嗓子问“怀安哥哥，我美吗？”<br>后来有几日他扛不住了，告了假。<br>华阳风风火火往我院里赶，上来就是一句：“沈枝意，你把人家玩坏了？”<br>我滋滋两声，装作端庄严肃：“暖暖，慎言！”<br>这两句还是江怀安教给我的，他经常说，我便也记住了。<br>5、<br>只是那天以后，华阳也塞到我院子里还和我分着江怀安上课。<br>两人经常说说笑笑。<br>华阳被绊，江怀安也不避嫌了立马扶住。<br>在课上，来人诗书会友，把我晾在一旁。<br>我拉着他进屋，他又拘谨的说不妥。<br>我是农户出身，他一个读书人哪有我力气大。<br>我拽起他，扣在床板上。<br>他深知我不知礼数和羞耻，但还是被我疯狂的举动吓得眼睑抽搐。<br>又羞又气，我捂上他的嘴，坏笑的说：“江怀安，你叫这么大声，想让谁听见。”<br>我不由分说狂咬了上去，拉着他的外衫，他震惊的与我反抗。<br>正在此时，我的门被拍的震天响。<br>“阿姐，你看到怀安哥哥了嘛？我寻不到他了。”<br>江怀安咬牙切齿，推开我。<br>我心头抹过一丝烦躁，华阳何时这么没眼力价，差点刚才就要有姐夫了。<br>6、<br>自那以后，江怀安以学疏才浅辞去我先生一职。<br>我的日子变得寡淡无味，期期艾艾闲来无事学了几句诗句。<br>华阳听说我发奋图强，搬着茶糕在我这欣赏。<br>“晓看天色暮看云”<br>华阳喝了口茶：“嗯<del>，然后呢？”<br>“行也思君，坐也思君。”<br>“噗”华阳一口水没咽，全喷出来。<br>她深吸一口气，仿佛用了很大力气才把手里的茶杯轻轻落下，嘴里喃喃自语：“没事，没事，哪个女主不是恋爱脑发家的，不气，不气。”<br>又走到我跟前，双手抓住我白嫩的细肩，疯狂摇晃。<br>“我倒要看看你这些年吃了多少江怀安给你喂的恋爱脑，你没有自己的生活了吗？”<br>声音不大，却让我猛然惊醒。<br>她掰过我的肩膀，认真的望着我。<br>“沈枝意，你想不想过不一样的生活，过一过普通人的生活，做富商、做大人、甚至做女皇！！！”<br>我颤抖着嗓子说“我想做地瓜，又香又甜阿娘小时候经常做的。”<br>7、<br>马上是他的生辰了。<br>我找了平日他的同窗，好友，为他庆生。<br>华阳点子多，说过生日要做蛋糕、烟花，很罗…什么曼什么克，我也不懂给她银子，她说帮我准备。<br>只是蛋糕需要我亲手做，更有诚意。<br>趁着江怀安去学堂，我带了几个丫鬟婆子，亲力亲为，<br>华阳带着我一步一步的做，打鸡蛋到手抽筋，但想到江怀安看见时开心我就一点也不觉得累。<br>华阳看我忙前忙后的样子，一脸嫌弃：“江怀安上辈子拯救银河系了吧，遇见你沈枝意为他劳心劳力。”<br>她又很担心的看着我：“沈枝意，他不值得，所有人都不值得，你这样对待”<br>我不以为然。<br>她在我身后叹气：“算了！可能真的需要按照剧情一步一步来，是我太心急了！”<br>屋里一片黑漆，我捧着蛋糕走到江怀安面前。<br>我笑的娇羞：“怀安，这是我为你生辰亲手做的，暖暖说…….”<br>“够了！”<br>我的笑容凝固在脸上。<br>他反手将我手里的蛋糕，摔在地上，鸡蛋打出的白色物，溅了我一身，脸上也有。<br>门外的众人听见动静。<br>陆续走进来，跟他抱拳，笑意盈盈的道贺。<br>他对我的嫌恶还存在眼底，让我看的一览无余。<br>我就这样仰着头看他，他也低着头看我，我看着他眼里倒影出的我，狼狈不堪。<br>红了眼眶，脏了裙摆。<br>满堂宾客，我顿了顿，嘴角扬起一抹微笑，故作轻松：“哦</del>原来这蛋糕就是用来糊脸的，像胭脂。”<br>我取下脸上的一点，伸出手指抹了过去：“生辰快乐，祝你永远平安，江怀安。”<br>8、<br>京中有人传出，皇帝欲将江怀安赐为驸马，是哪位公主的却不知。<br>毕竟华阳昨日刚刚及笄。<br>我转着茶杯，微微垂眼。<br>贴身伺候的小宫女迈着小步子匆匆赶来。<br>秀眉紧蹙着，朝我抱怨：“公主，您还在这喝查呢，外头的那些碎嘴子都传呢，说江府小少爷要嫁到华阳公主府去。”<br>小丫头只是随意讲了几句，听的我身体凉意多了几分。<br>“不会的，我们十二岁便认识了，牵过手，也亲过，他还为我束过发，他说过……”<br>我后知后觉<br>“对了，他没说过，他没说过要娶我……”<br>门外雨打风急。<br>我晃着衣摆跑在前，小丫头举着伞跟不上我。<br>“公主，快跑慢些，淋了雨，会病”<br>到了江府前，几个小厮没拦住我，拦住了后面的小丫头。<br>气的她，喊着他们大胆：“公主随侍”<br>我跑的极快，心脏伴随着撕裂感的，大声喘息。<br>“江……”<br>伴随着雨声，里边传出一句：“父亲，若是皇上不收回成命，执意将沈枝意与我赐婚，我宁肯剃度为僧，也不上公主榻。”<br>“宁为庙中僧，不上公主榻”<br>我嘴里默念，大脑一片混沌，茫然不已。</p>
<p><strong><a href="https://mparticle.uc.cn/story.html?p=sVXrL&wm_cid=591171382417562624">点我查看全文</a></strong></p>
]]></content>
      <categories>
        <category>小说</category>
        <category>古言</category>
      </categories>
      <tags>
        <tag>小说</tag>
      </tags>
  </entry>
  <entry>
    <title>我的人你也敢碰</title>
    <url>/posts/14c3f776.html</url>
    <content><![CDATA[<p>我是钟家唯一的女儿，父母老来得子，对我是百依百顺，直到10岁那年，父母领回来一个男孩，男孩比我大5岁，眉清目秀，可浑身上下都冷冷的，我不喜欢他。<br>他的出现彻底毁灭了我的美好生活，他学习好，弹琴好，体育好，就连绑个鞋带都比我好看，他就像一团巨大的乌云，将我死死笼罩着，我无论跑的多快，都没办法摆脱。<br>我成了父母口中不成器、不懂事的小孩，起初我也是努力过的，奈何敌人太强大，我无论如何也无法打败他，本着在哪里摔倒就在哪里躺下的原则，我索性摆烂。<br>……<br>今天是我20岁生日，我请全班同学去酒吧庆祝，什么贵点什么，什么离谱点什么，总而言之就是全场的消费我买单。<br>不是说我不成器嘛，我就不成器给他们看看。<br>我其实并不喜欢酒吧，喧闹的音乐吵的人头疼，可是无所谓，我的卡是肖澈的，我这边一刷卡，他那边就会收到消息，只要能让他肉疼，吵点就吵点了。<br>我坐在位置上，看着舞池里摇摆的同学，她们冲我挥手，我举起酒杯摆了摆手，这不摇都已经够晕了，这一摇脑袋不成浆糊了。<br>话说这酒吧是不是卖假酒啊，几万一瓶的酒喝了一杯就这样晕。<br>我还在研究酒瓶上的成分表，就被汤敏拉走了。<br>“琪琪！你怎么回事啊，哪有寿星一个人喝闷酒的啊！”<br>“不是，我不会啊！你们摇你们的嘛！”<br>“不行！一起来！”<br>这女人力气贼大，一下就把我拖进了舞池。<br>哎，我今天为了符合败家女的人设，特意穿了个超短裙，上面配了个露脐装，这会儿站着总感觉上下漏风的。<br>我配合着扭了两下，腿上凉飕飕的冷，早知道多穿点了，我正要走，大腿上传来一阵潮热，我低头，一直咸猪手正在肆无忌惮的撩拨我的大腿。<br>不要命了，敢动你姑奶奶我！<br>我一把抓住咸猪手，恶狠狠地掰着他的手指往下压。<br>男人的惨叫声那叫一个声嘶力竭。<br>他身旁四五个壮汉，一头黄毛的男人率先反应过来，他逼近我凶神恶煞：“还不快松手！”<br>我也不知道是太生气了，还是喝醉了不怕死，我挑衅般更用力地掰着那人的手指：“我不！”<br>男人抄起手就是一巴掌，这一巴掌下去，所以人都愣住了，几秒钟后伴随着汤敏大吼一声：“我靠！你敢打我们琪琪，我跟你拼了。”<br>霎时间，舞池里扭成一团，纸片、酒水、水果，漫天飞舞。<br>结果显而易见。<br>警察局里，我晕乎乎的坐着，心里咒骂酒吧卖假酒。<br>两帮人剑拔弩张地谁也不说话。<br>直到警察局的门从外头被人推开。<br>肖澈一身合体的蓝色条纹西装，脸上的棱角都透着冷冽，金属框的眼镜下是漠视一切般冷淡的眼神。<br>我们感觉警察局的温度都低了些。<br>肖澈穿过人群，停在我的面前，亮的发光的皮鞋都能透露出这个人的苛刻。<br>我低头不去看他，他那张冷脸瞧一眼都觉得寒。<br>肖澈扯掉我的粉色假发：“这就是你想要的生活？”<br>我去抢他手里的假发，不耐烦地直视他：“对啊！不要你管！”<br>他眉头不易察觉地蹙了蹙，抬手轻轻地触了触那片红晕。<br>我打开他的手倒抽一口凉气：“痛啊！”<br>汤敏是知道我们的，搞不好能在警察局打起来，她可不想在警察局过夜，她赶紧跑到肖澈旁边：“澈哥，这次真不怪我们，是他们先摸琪琪大腿，琪琪才出手的，他们非但不道歉，还动手打人！”<br>“放屁！”黄毛气急败坏：“我们老大的手还差点被她掰断呢！”<br>肖澈眼神冷冷地扫向黄毛，修长的手指解开西装扣子，他将西服盖在我腿上，然后径直走向那个黄毛，他低下头瞧着那只手，眼镜下是令人胆寒的冷：“我的人你也敢碰！”</p>
<p>【2】<br>肖澈做事素来稳妥，也不知道用了什么方法，那群人很快就同意了和解，做完笔录，大家就出了警察局。<br>肖澈安排人把同学都送回去，夏末秋初的风带着些凉，我忍不住打了个哆嗦。<br>“上车吧，回家。”<br>我是不想那么听话的，但是好汉不吃眼前亏嘛，这大半夜的也不好打车，我小跑着坐进副驾，肖澈紧随其后。<br>他这人活的就像个机器，为人处世一板一眼，就连车子都干净的离谱，好在车子里的味道还算好闻，是那种淡淡的像是雪松的味道，肖澈身上也一直有这样的味道。<br>我是真的有些累了，头也晕乎乎的难受，上下眼皮止不住的打架。<br>肖澈近乎变态的完美主义，用在开车这倒是好的很，一路平缓，真的很适合睡觉。<br>临到家时，肖澈喊我，我这人有些起床气，这会儿睡的正酣被喊醒了自然是一肚子的火，我转过头假装没听见，肖澈也不恼就这样执着的喊我。<br>我就是铁了心不理他。<br>“你再不起，我只能抱你进去了。”肖澈语气淡定，他是料准了我不想他碰，会乖乖就范。<br>嘿！我就不让他称心如意。<br>我转过头贴近他：“好啊，那就麻烦哥哥了。”<br>我们离的很近，我能瞧见他乌黑浓密的睫毛微微颤动，他那双总是毫无斑斓的眼眸闪过一丝迟疑，这是我没见过的肖澈。<br>我像是占领高塔的战士，乘胜追击，我微微抬头，带着醉意将唇贴在他的耳边：“哥哥，你怎么还不抱我。”<br>几乎在我说完话的一瞬间，我看见他红的几乎要滴血的耳廓。<br>我愣住了，肖澈这是在害羞？<br>砰的一生，关门声重的像是要把我震聋，我愈发高兴，肖澈这个机器人卡bug了！<br>我兴奋地跑下车，屁颠屁颠堵在他前面：“你耳朵红了，你是不是害羞啊哥哥。”<br>“没有。”肖澈绕开我。<br>“明明就有，我刚刚都看见了。”我面对着他后退，眼里是肆无忌惮的嘲弄。<br>“没有。”肖澈不看我。<br>“你为什么不承认，我知道了，你是不是喜……”<br>“够了！”肖澈的声音很大，但很快又恢复如常：“对不起。”<br>我的酒被肖澈这么一吼醒了大半，脑子里是十万个为什么。<br>我翻来覆去睡不着，忍不住拨通了汤敏的电话。<br>电话过了好久才接通，汤敏懒懒的声音传来：“喂……”<br>“喂，宝贝，我有个事情想问你。”<br>“嗯，说。”那边的声音懒懒的。<br>“就是我有一个朋友，她哥哥……不对，是没有血缘关系的哥哥，这个哥哥今天一反常态，他竟然因为妹妹撩拨了两下就脸红了。”<br>“肖澈哥脸红了！”汤敏像是听到了什么宇宙无敌大八卦，一下就不困了。<br>“嗯。脸红了，准确的说是耳朵红。”我仔细回忆着：“诶，不对啊！是我朋友的哥哥，不是肖澈！”<br>汤敏懒得拆穿：“好好好，然后呢？”<br>“然后我就……不是，我朋友就追着问嘛，结果她哥哥发火了，吼她。”<br>“哇，钟琪，你是人才啊，肖澈哥竟然能在一天之内出现害羞和生气两种情绪。”<br>“我也很震惊！你说这是什么情况啊？”<br>“我觉得，肖澈哥就是喜欢你，我肯定！”<br>“嗯？你怎么会有如此可怕的想法！”<br>“这哪里可怕啊！你们两青梅竹马，男未婚女未嫁，又不是亲兄妹，喜欢你不是很正常。而且肖澈哥虽然看着冷冷的，但他对你一直很好啊……”<br>他对我好吗？我努力回忆着。<br>好像，还真的挺好的，虽然我经常给他惹麻烦，但他从来都没对我发过火，还会帮我一起瞒着爸妈，当初那个渣男的事情他也帮我隐瞒了……<br>“喂，喂，琪琪，你在听吗？”<br>我回过神：“嗯。”<br>“不行你再试试！你不想知道肖澈哥喜不喜欢你吗？”<br>试试……<br>“诶！怎么回事，我都说了不是肖澈了，不和你说了！”我急匆匆挂了电话。</p>
<p>【3】<br>似乎是老天爷也想知道答案，第二天晚上就给我碰上了一个顶顶好的机会。<br>肖澈出去应酬喝了酒，恰逢司机李师傅家里有事，我主动请缨替了李师傅。<br>我是真的路痴，开了一个多小时才找到酒店，等我到是，灯火通明的大堂里只有肖澈一个人坐在沙发上，他手臂撑在大腿上，手掌拖着脸颊，看着……很好欺负的样子。<br>我走近，肖澈闭着眼，长长的睫毛在眼下投下一片阴影，嘴巴微微张着，沉重的呼吸声像在诉说今晚的不易。<br>这还是我第一次见他睡着的样子，没了清醒时的清冷疏远，此刻的他看着是那样的毫无防备，好像给他一颗糖就能将他骗走。<br>我忍不住戳了戳了他的脸颊。<br>他哼唧了一声，浓密的睫毛轻颤着睁开，眼睛红彤彤的，看向我的眼神带着些迷离。<br>我正要开口，他的手小心翼翼地抚上我的脸颊：“又做梦了。”<br>他的声音低沉慵懒，还带着些无奈。<br>我的心像是被什么戳了一下，酥酥麻麻的。<br>我咽了口口水：“这不是梦。”<br>肖澈的眼神眨了眨，他抽回手，眼里又是一如既往的清冷疏远：“怎么是你！”<br>“李师傅有事，就我来咯。”<br>他站起身，看着和平时无异，可他起身时我还是能看到他晃了晃，他绕开我就要往外走，刚走一步就撞在了沙发腿上，我看着他紧捏着的拳头，看得出一定很痛。<br>我无奈，走到他身旁，拉着他的手搭在我肩上，我身上搂住他的腰：“我扶你吧。”<br>他没再反抗，只是整个人都和我尽可能的保持距离，倒像是我会吃了他似的。<br>一路上我们没人讲话，本着安全第一的原则，我决定回家了再试。<br>我乖巧地将他扶进房间，黑漆漆的房间，只有窗帘投进来一丝亮光，我抵着门将门锁住。<br>肖澈反应过来，伸手要去开灯：“你可以出去了！”<br>我拉住他的手逼近：“哥哥这样狠心？用完我就要赶我走？”<br>肖澈喉结滚了滚，咬牙切齿：“钟琪！你想干什么！”<br>我反正脸皮厚，我轻笑着：“我就是想和哥哥聊聊天，聊聊你昨天晚上为什么害羞，聊聊你今天为什么看着我说又做梦了……”<br>正所谓做戏做全套，听着肖澈愈发不稳的呼吸，我的手愈发猖狂，我的指尖轻轻的画过他的腰肢、腹肌一路向上。<br>砰的一声闷响，退无可退，他的背抵着墙。<br>“哥哥，你怎么不说话啊？”<br>月光洒在房间里，他的喉结上下滚动，伸手捏住我的手腕，他带着醉意的眼眸赤裸裸地盯着我：“我不是什么时候都能忍住的。”<br>我勾了勾唇：“那就不要忍。”</p>
<p>【4】<br>顷刻间，肖澈的唇如洪水猛兽般将我淹没，他唇很软，可动作却似要将我吃干抹净。我慌了，我伸手推他，他的却搂的更紧了些。<br>我的脑袋一片空白，他像是惩罚般轻咬我的嘴唇，心头有一股热意在汹涌翻滚。<br>许久，他松开我，他从始至终都闭着的双眼缓缓睁开，带着浓的晕不开的情欲，他捏着我的下巴：“满意了吗？”<br>我有些喘不过气，他低垂的眼眸，印着我口红的双唇，微凉的风吹起纱幔却带不走方才的汹涌。<br>我脑子宕机了，逃似的跑回房间，我将房门反锁，整个人跳到床上，用被子将头盖住。<br>肖澈的喘息声，他情迷的眼眸，他滚动的喉结……<br>“啊……”我气恼地掀开被子。<br>撩拨不成反而被夺走了初吻！<br>我轻轻地触摸嘴唇，方才的画面再次袭来，他的唇怎么会那么软，他怎么那么会亲啊……<br>对啊！他怎么那么会亲啊！<br>他是不是和别人亲了很多次所以才那么会亲的。<br>等会！他是我哥啊，他和别人亲，谈对象管我什么事情啊。<br>……<br>一夜无眠，脑子就像是乱码了，一连串前言不搭后语的问题，可全部都和肖澈有关，我觉得我疯了。<br>第二天我起了个大早，刚打开房门，就迎面撞上了肖澈，他一身合体的西装，金属框的眼睛下是淡漠的眼神，他身上充斥着一如既往的疏离感。<br>他像是什么也没发生，冲我点点头就下楼了。<br>他难道是断片了！<br>他怎么可以断片，害我一晚上没睡着，他竟然不记得了？<br>我三步并作两步，冲上去拉住他：“你什么意思？”<br>肖澈蹙了蹙眉，他拂开我的手：“什么？”<br>“昨天晚上你做了什么你心里没数吗？”我瞪着他。<br>肖澈理了理衣服：“我昨天喝多了，不记得了。”等到他将衣服理好，这才不急不慢地看向我：“昨晚我做什么了？”<br>“你！”<br>我气的不行，刚想破口大骂，楼梯上妈妈缓缓走下：“钟琪，你一大早又找什么事啊，昨晚干什么了？哥哥能对你干什么，你别一天天的没事找事。”<br>我捏紧拳头，看啊，这就是我家，从小到大，无论什么事，他们总是不问缘由的相信肖澈而指责我。<br>“你那么喜欢肖澈，当年为什么还要生我！”我厌恶的看着肖澈：“我讨厌你！”<br>我气冲冲的跑出小区，夏末秋初的雨打在身上是冰凉的疼，我伸手拦车，川流不息的车辆却没有一辆愿意为我停下。<br>我蹲在马路边哭，好像这满天的大雨也无法浇灭内心的委屈。<br>不知道过了多久，滂沱大雨没在落下，噼里啪啦的响声闯进耳朵。<br>我抬起头，汤敏撑着红伞，关切的看着我。<br>我哭的更惨了，跳起身将她抱住，鼻涕眼泪横流：“宝贝……只有你关心我……呜呜……”</p>
<p><a href="https://u.tb.cn/5aYSjGQjGzhxNvJ5IfpvnR">使用UC浏览器APP点这里查看原文</a></p>
]]></content>
      <categories>
        <category>小说</category>
        <category>婚恋家庭</category>
      </categories>
      <tags>
        <tag>小说</tag>
      </tags>
  </entry>
  <entry>
    <title>江之南是学校里众星环绕的贵公子，我是无人问津的丑小鸭</title>
    <url>/posts/7c9afdd0.html</url>
    <content><![CDATA[<p>1<br>　　我和朋友在KTV扯着嗓子狂飙死了都要爱，侍应生推门而入。我俩像被掐了脖子的公鸭一样面面相觑，侍应生面不改色说我们的果盘到了。<br>　　本来没什么。脸皮厚如我是不会在意嗓子岔劈还被人听到，左右不过是个陌生人。<br>　　可是坏就坏在，这张脸我可太熟悉了。<br>　　熟悉到做梦都会拎出他来揍两拳的程度。<br>　　朋友掐着我的胳膊倒吸一口气，我都怕他厥过去。<br>　　无他，江之南这张脸确实妖孽。要不然怎么家里拆迁款刚到我就去给他送情书。<br>　　江之南估计是没认出来我来，放下果盘就要走。<br>　　我不知怎的头脑一热，直接叫住他。<br>　　「喂，怎么做服务生的，推门之前都不敲门吗？」<br>　　江之南一愣，然后跟我鞠躬说，「对不起，是我的疏忽。」<br>　　「道歉就行了？」<br>　　还没等我往下说，腰间传来的痛直接让我扭曲了。我侧头看向罪魁祸首，她倒是一脸忿忿不平地瞪我一眼，扭过头又换成一副温温柔柔的小女生样子，跟江之南说，「没事，我们不介意，你先去忙。」<br>　　等江之南把门关好，还没等我兴师问罪，小丫头片子直接扑倒我问我有没有心！！怎么能对这张脸如此地没礼貌！<br>　　我被她晃得头昏脑涨，心里头只有一个念头：天杀的江之南，老娘遇见他准没什么好事！<br>　　2<br>　　我以为酒吧碰见江之南只是我大好人生的小小插曲。<br>　　在我洋洋洒洒用十万字，向小姐妹介绍了她以为的这个柔弱可怜帅气打工仔，在学校的时候究竟是多么臭屁没礼貌不尊重人，并且还着重强调了他在我告白之后的那一声嗤笑是如何伤透我脆弱可怜的少女心之后，我那三观跟着五官走的损友上下打量了我一番，然后学着我描述的那一声嗤笑跟我说，我急了。<br>　　然后我面无表情，把她按进沙发里锤。<br>　　顺便敲诈了一顿人均五千的西餐。<br>　　后果就是我俩对着一盘一口的菜面面相觑。她咬着牙带着扭曲微笑对我说，让我一定吃饱喝足。<br>　　我眼观鼻鼻观心，面不改色将面前生不拉几的还带着所谓肌红蛋白的牛肉一口吞下，在她一言难尽的表情下——<br>　　呕。<br>　　品鉴过，非吾等凡人所能受。<br>　　我俩面如菜色相互搀扶着从餐厅里出来的时候，正好看见江之南从一辆正红色法拉利的副驾驶下来，随后主驾驶下来一个身材火辣的御姐，挽着江之南的胳膊就往里走。<br>　　我们一行人擦肩而过。<br>　　我们两个人面不改色，实际握在一起的两只手都已经攥成了青白色。<br>　　等到看不见那两个人的身影，我们俩站在饭店门口对视一眼，非常默契地得出一个结论——<br>　　江之南他被包养了哈哈哈！大快人心。<br>　　当天晚上我大发慈悲，饶恕了这家坑得不能再坑的破餐厅，拉着我的小姐妹挑了家酒吧狂欢。<br>　　据我的小姐妹形容，缩在卡座里哈哈大笑的我像个得不到就要毁掉的反派变态。<br>　　我说，「管他呢，重点是江之南他也有今天！」<br>　　「江之南今天怎么了？」<br>　　我没在意这个陌生的声音，嘴巴过得比脑子快。<br>　　「怎么了，江之南他居然被包养了啊哈哈哈——嗷！死丫头你掐我干什么！」<br>　　我瞪过去，却看见此时此刻我的小姐妹颤颤巍巍抬起手指着我身后。<br>　　「怎么了我身后有什么你跟见了鬼——」<br>　　嘶我靠江之南！<br>　　面前穿着酒保衣服，依旧俊得跟大明星角色扮演似的江之南，端着托盘，好整以暇地盯着我看。<br>　　那一刻，我只想这破烂世界，赶紧给老娘毁灭。<br>　　3<br>　　所以事情怎么变成了现在这个样子。<br>　　江之南，大学期间炙手可热的富二代，人尽皆知的贵公子，现在正在我家厨房里为我洗手做羹。<br>　　别说，味儿还挺香。<br>　　不对不对，我晃晃脑袋，企图把那堆喝进脑子里的酒精全都晃出去。晃到我自己恶心想吐，我才勉勉强强接受了这个现实——<br>　　我，平平无奇拆迁户，包养了落魄少爷江之南，还是人家主动送上门。<br>　　让我们把镜头拉回前一夜。<br>　　彼时我只觉得天崩地裂无颜见人。我的好闺蜜学着我在破餐厅的样子眼观鼻鼻观心嘬着饮料里的吸管。<br>　　江之南反而成了我们三个人里最淡定的一个。<br>　　他没搭理安静如鹌鹑的我们两个，自顾自将我们桌上还没喝完的酒收进托盘。收到一半他好像想起来什么，侧过头冲着我笑，说，<br>　　「客人，我将您没喝完的酒收走了，您要重新点个套餐吗？」<br>　　听听，多么无耻，多么不要面皮，如此欺诈消费者的事情竟能说得冠冕堂皇，这不立刻12315投诉举报一波都对不起我作为一个消费者的身份。<br>　　但是我答应了。<br>　　没别的原因，这脸忒贵。<br>　　我也是三观跟着五官走。<br>　　江之南好像愣了一下，夸我们财大气粗。<br>　　然后不知道他脑子里在想什么，把托盘放在了我们桌子上，又扯开了系好的领结，坐过来我身边靠向我。<br>　　我跟过电一样，噌一下一个弹跳扑到旁边我的小姐妹旁边，警惕地问他想干嘛。<br>　　江之南好像很失落，低下头，委屈问我：<br>「因为我被包养，你就嫌弃我了吗？」<br>　　「不，不不不，倒也没有，各有各的难处嘛哈哈哈……」<br>　　「那你要包养我吗？」<br>　　他又凑过来，眼睛湿漉漉的好像哭过一样。还有他这样一凑过来，刚刚解开的领结和衬衫扣子就这么送到我眼前。<br>　　准确地说，不是衣服，是肉体。<br>　　嘶后腰又被掐得生疼，这下我倒是没空搭理死丫头片子。<br>　　也许是美色太诱人，也许是喝多了太上头，又或者对年少初暗恋不甘心，鬼使神差的，我居然答应包养他！<br>　　靠靠靠死丫头我后腰绝对青紫了一块回去一定找你算账！<br>　　就这样，当天晚上，我就这么把人拐回了家。<br>　　倒是什么也没干。<br>　　我喝太多了，一回来我就抱着他哇哇大吐，印象里吐得玄关卧室满哪都是，现在起来我满是呕吐物的衣服被换成了干净的睡衣，屋子里也被打扫的是干干净净，没有一点异味。想着可能有阿姨帮忙收拾过了。<br>　　刚出卧室就能闻见饭菜的香味。我以为阿姨还没走，赶紧过去让阿姨别忙活了，宿醉的早上没什么胃口。<br>　　然后一个拐角，我就看见，裸着上半身叼着根棒棒糖正在颠锅的江之南。<br>　　他居然会颠锅！<br>　　不对，这是重点吗？重点是，我跟见鬼一样喊了出来：<br>　　「江之南，你怎么在这？！」<br>　　4<br>　　据江之南所说，把我送回来的时候他确实想走来着。但是我抱着他又哭又闹又吐，一边吐一边骂他负心汉毁了我年少单纯无知青葱爱恋。<br>　　玄关口站着的阿姨一脸指责地盯着他，要把我接过去，我还抱着人不撒手。<br>　　好说歹说才把我从江之南身上巴拉下来，阿姨嫌弃地拎着一身呕吐物满脸鼻涕眼泪的我进房间收拾，也没忘礼貌地给江之南指了一间屋子让他进去收拾收拾。<br>　　等到把我安顿好，阿姨下来的时候，江之南带着一身水汽，正收拾我吐在门口的烂摊子。<br>　　阿姨问他是谁，江之南老实回答，我新包养的小白脸。<br>　　阿姨一脸震惊，念叨着你们这群小年轻。然后恨铁不成钢地回了屋。<br>　　今天本来是阿姨调休的日子，按理说昨天晚上阿姨就能回家。但是江之南说，阿姨对他不放心，今天早上对他教育了一番，估摸着我差不多要醒，才不放心地走人。<br>　　临走前还意味深长地跟他说家里有监控，让他老实点。<br>　　我听完，内心已经麻木。跟个机器人一样一勺又一勺往嘴里送粥喝。<br>　　天大地大，吃饭最大。更别提这粥熬得还怪香。<br>　　江之南促狭地盯着我笑，跟调戏人似的，问我：<br>「金主，这饭吃得还满意吗？」<br>　　「满意满意！」我狂点头。<br>　　不对！这不是重点啊！<br>　　我小心翼翼将端起来牛饮的粥碗放回桌上，刻意清了清嗓子，鼓起勇气对一旁撑着下巴歪头对我笑的江之南说：<br>　　「昨天晚上，我喝多了，都是玩笑话，你别介意哈，就当我发疯啊哈哈哈……」<br>　　我说不下去了，因为我又看见江之南的表情逐渐变得失落。<br>　　「不是，哎呀，就算是我包养你，你们这还兴一人侍奉二主的嘛。我跟你讲没有这样的道理昂。」<br>　　哪知道江之南听了这话，脸色跟变天一样立马就多云转晴，给了我一个wink说，让我不用担心，昨天晚上我看到的那顿是前金主请他的散伙饭。现在他是只属于我这一个金主的小白脸。<br>　　救大命，江之南的wink。我已经拿出我的洪荒之力去抵挡眼前美色的诱惑。<br>　　江之南又凑过来，一张帅到人神共愤的脸就这样跟放大二十倍一样凑到我面前，近到我用我五百度近视加散光的死鱼眼都能清晰看到他又浓又密还根根分明自带眼线的眼睫毛。<br>　　江之南问：「你已经不喜欢我了吗？」<br>　　等等，已经？<br>　　我瞬间清醒过来，一把推开他，问他什么意思。<br>　　「字面意思啊。」他说，「你是林深秀嘛，给我送过情书那个。」<br>　　「顺便还嘲笑我一句不如酒保长得好看？」我反问。<br>　　这下什么旖旎的心思都没了。就这一句话又勾起我当时的难堪和自卑。尽管当时他说的是事实。<br>　　那时候的我不懂什么护肤化妆穿衣打扮，十七八那点胶原蛋白早就已经不够二十岁常年通宵到凌晨打游戏的我嚯嚯。整个人天天跟个游魂似的学校里晃荡，别人见了我不礼貌的都要叫一声女鬼驾到。<br>　　我不在意其他人，但是不代表不在意被自己喜欢的人这样嘲讽。<br>　　「你是来戏弄我的吗？」我问江之南。<br>　　他还想说什么，我已经摆出了一副好走不送的架势，也不再看他，径直回了自己的屋子。<br>　　太过分了，太过分了。江之南简直就是个二百五，我是眼瞎了才会喜欢这么一个人！<br>　　我缩在一堆玩偶抱枕里。宿醉的头疼劲又上来了。<br>　　又难过又难受，想哭又觉得自己没出息。<br>　　就这么跟自己较着劲，较劲到累了，模模糊糊听见大门开关的声音。<br>　　走了吗？走了才好。以后都不要再见到你了，混蛋江之南。<br>　　5<br>　　上次见到江之南已经是一个月前的事情。<br>　　那句包养不过是一个切切实实的玩笑，最起码我没有当真。<br>　　我以为这一段不过是一个小小的插曲，我和江之南这辈子都不会再有什么见面的机会。<br>　　直到今天。<br>　　熟悉的环境，熟悉的理由，熟悉的饭菜香味，熟悉的做饭的人。<br>　　我顶着一个宿醉过后沉重得像是灌了八百斤秤砣的脑子面无表情坐在餐桌旁，看着江之南在我家厨房里忙前忙后。<br>　　我掐了一把自己的大腿，很好，很疼，证明我不是在做梦。<br>　　苍天啊大地，你们至于这样玩我吗？<br>　　等到江之南摆满一桌子菜并且将碗筷整整齐齐摆在我面前，然后欣然坐在我对面的时候，我整个人已经处于大脑CPU严重过载的状态。<br>　　别问我为什么不问江之南为什么还在我家。<br>　　问就是我这人喝酒断片不彻底。<br>　　昨晚喝大后一群狐朋狗友起哄我手机通讯录里排名第一的AAA亲亲小白脸是谁，酒壮怂人胆，我一个电话直接打过去。<br>　　电话那头江之南用腻死人不偿命的口气和我说：<br>「金主，您终于想起联系我了。」<br>　　我开的免提。<br>　　以后我再喝上头我就是二百五。<br>　　至于什么时候存的江之南电话，第一次。<br>　　我犯贱，没舍得删。<br>　　一失足成千古恨。<br>　　但是不能亏待我的肚子。<br>　　我没好意思看江之南。就当他整个人不存在一样，风卷残云式吃饭，只求迅速吃饱喝足后火速逃离现场。<br>　　然后我听见江之南轻轻笑了一声，起身不知道去做什么，回来的时候拿着一杯水放在我旁边，让我慢点吃小心噎到。<br>　　我欲哭无泪。<br>　　江之南你如果真的贴心现在就应该赶紧走人啊！<br>　　我没等到他说告辞，等到了一句我从来没想象过能在他嘴里说出来的话。<br>　　江之南说：<br>「对不起。」<br>　　我愣住了，往嘴里送饭的手都停下来。<br>　　可能我这个样子实在是太傻了，江之南又冲着我笑，顺便又往我饭碗里加了两筷子青菜。<br>　　「不要光吃肉，要营养均衡，多吃蔬菜。」江之南说。<br>　　「哦……好。」<br>　　我又开始埋头干饭，只是这次速度慢了很多。<br>　　我感觉一股子热气冲上了我的眼角，我不想丢人的，真的不想。<br>　　江之南手忙脚乱地抽出纸巾去给我擦眼泪，问：「这是怎么了？」<br>　　我没法回答他。<br>　　向江之南告白之前，我谁也没去说过。因为我非常清楚地知道这是一次百分百会失败的告白。我也只是单纯地想为自己过去混沌麻木的人生画上一个句号罢了。<br>　　只是我没有想到我会被那样嘲讽。<br>　　江之南甚至没有多看我一眼，说话的语气也并不阴阳怪气。可是就是这样普普通通一句阐述事实的话，让我告白失败的当天，找了个KTV彻夜买醉。<br>　　我还特意看了几眼给我送酒的侍应生，印象里确实一个个白白净净干净帅气。<br>　　于是那天我哭的更大声了。<br>　　等到第二天我一身酒气回到宿舍，我的发小兼闺蜜冲上来就要暴打我，问我昨天到底去哪里了怎么都联系不上，她差一点就要去报警。<br>　　我没跟她说实话。<br>　　哪怕我知道我说了之后她一定会拉着我去堵江之南要他给我道歉。<br>　　但是我不想，因为我知道，以后我的人生会开始一个新的阶段。<br>　　尽管这个告别不是多么美好。那也与以后的我再无关系。<br>　　可是我从来没想到我能再见到江之南。<br>　　那个在我吃了一顿两百块大餐的我在接下来十天左右都要缩衣节食的时候，已经闪闪发光的像是一颗恒星的江之南，早就已经因为嫌弃学校食堂油水大，搬出去租房请了个阿姨给他做一日三餐。<br>　　其实花了两百块也不至于让我以后十天顿顿馒头夹老干妈。但是一个月生活费一千覆盖衣食住行全方面的我要想用两百块奢侈一把确实很不容易。<br>　　况且，江之南是那种一件衣服顶我半年生活费的富家子弟。<br>　　但是我所谓，那天之后，我会成为一个小暴发户。<br>　　再有钱的江之南，也只会成为我不想去触碰然后慢慢遗忘的过去。<br>　　所以对于现在这个局面，眼前这个慌张安慰的江之南和那天高高在上的江之南好像分割成两个人。<br>　　现在的江之南语无伦次解释道：「当时是我没情商，是我说得不对。在KTV见到你的时候就认出来了你，不过当时满脑子都是太尴尬了，不知道该说什么。没想到后来还能见到你。其实第二天早上的时候就想跟你说抱歉，只是当时我好像又搞砸了。再后来也不知道该不该联系你。」<br>　　他越说我越忍不住哭。<br>最后他好像是放弃了，特别认真地对我说：「你不要别哭啦，现在你是金主，我是被金主包养的小白脸，你要是气不过，想怎么对我都可以。」<br>　　我瞬间被气到，说：「江之南你能不能正经一点，让我包养你根本就是个笑话。」<br>　　说着还打了个哭嗝。靠，更丢人了。<br>　　我这二十多年没丢过的人，今天一个小时内全都给我丢光了。<br>　　还哭屁，越想越生气。<br>　　他看我好像缓过来了，一副终于松口气的样子，又问我：<br>「真的不想包养我吗？」<br>　　这叫我怎么回答？<br>　　我一个母胎单身至今男生小手还没牵过的纯情年轻女暴发户，面对这么一张写着求包养求收留还眼巴巴像小狗一样看着我的江之南，怎么忍得住？<br>　　不过我还是忍住了。<br>　　理由是我有点亏。<br>　　男人不自爱，就像烂白菜。再帅的男人都适用，哪怕这个男人叫江之南。<br>　　我委婉地说他身经百战，我们不太合适。他好像愣住了。<br>　　好像我说的也不太委婉。<br>　　然后现在被气笑得人成了江之南。<br>　　怎么说呢，这比他刚刚跟我道歉一百句来得解气。<br>　　不过最后他还是留下了。不是包养，而是雇佣。<br>　　之前的阿姨家里有些事要离开一段时间，我缺个人做饭。<br>　　江之南他做饭太好吃了。嗝。<br>　　这次不是哭嗝，是撑得。<br>　　江之南对我要雇佣他的这个说法表现得很诧异，倒也没说什么。大概还是觉得有些愧疚。<br>　　总之，现在，我，林深秀，正式成为江之南他字面意义上毫无灰色交易的伟大的金主大人！<br>　　还是没有六险一金没有双休没有单休，要求江之南全天无休做饭收拾打扫卫生的纯纯资本家金主。<br>　　知道这件事的闺蜜吐槽我应该被吊在路灯上供人观赏。<br>　　我得意回复江之南人家自己乐意。<br>　　然后收获一枚大大的白眼。</p>
<p><strong>[点我查看全文](<a href="https://mparticle.uc.cn/story.html?p=Pztpi&wm_cid=590604492827788288">四年前，江之南是学校里众星环绕的贵公子，我是无人问津的丑小鸭 (uc.cn)</a>)</strong></p>
]]></content>
      <categories>
        <category>小说</category>
        <category>现言</category>
      </categories>
      <tags>
        <tag>小说</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯和字节这对曾经的冤家，在视频二创上竟然上演了世纪大和解。</title>
    <url>/posts/fcce4138.html</url>
    <content><![CDATA[<h3 id="腾讯和字节这对曾经的冤家，在视频二创上竟然上演了世纪大和解。"><a href="#腾讯和字节这对曾经的冤家，在视频二创上竟然上演了世纪大和解。" class="headerlink" title="腾讯和字节这对曾经的冤家，在视频二创上竟然上演了世纪大和解。"></a>腾讯和字节这对曾经的冤家，在视频二创上竟然上演了世纪大和解。</h3><p>4月7日，腾讯视频与抖音集团宣布达成合作，双方将围绕长短视频联动推广、短视频衍生创作开展合作。腾讯视频将向抖音授权其享有信息网络传播权及转授权权利的长视频。此外，腾讯视频与抖音还明确了短视频衍生创作的方式、发布规则，共同促进短视频的创作、传播。</p>
<p>这次合作，也被外界视为“世纪大和解”。此前，腾讯和抖音曾因版权问题多次对簿公堂，也曾在公开场合互相炮轰。如今双方的握手言和，意味着双方在长短视频创作领域找到了利益共通点。在短视频的直接交锋之外，腾讯的长视频资源也可以以版权授权的形式，授予它的直接竞争对手。</p>
<p><img src="https://cdn.kimtoli.com/Blog/post_img/20230408102130.jpg" alt="腾讯和抖音合作"></p>
<h3 id="腾讯自营短视频产品的始末"><a href="#腾讯自营短视频产品的始末" class="headerlink" title="腾讯自营短视频产品的始末"></a>腾讯自营短视频产品的始末</h3><p>值得一提的是，腾讯其实是国内最早布局短视频的互联网公司之一，早在2013年，就上线了微视，但当时的战略，不过是对标海外产品的进行新产品尝试，并没有在战略上重视，由于总办对其市场化的误判，最后在2015年开始实质上放弃。</p>
<p>快手和抖音火爆后，腾讯希望重新回到这条赛道上来，这几年，腾讯帝国内部各路诸侯先后发布了哈皮、yoo视频等十余款短视频APP，最后基本都以失败告终。</p>
<p>2017年，以抖音和快手为代表的短视频持续高歌猛进，腾讯开始复活微视，甚至提到了“战略级”。但微视这款产品似乎受到了诅咒，内部资源和组织难以顺畅打通，发力艰难，在外部，则一直不被主流圈子看好，现在依然处在艰难爬坡的状态，目前看只能作为防御性产品拖住竞争对手。</p>
<p>也是在这个时候，腾讯微视的小2联系到了我，顺利入住的微视MCN合作机构，作为集团“战略级”产品，扶持当然是不能少了，腾讯集团公司花了巨款砸在了内容补贴上面，补贴方式为cpm结算，实不相瞒。。我在刚开始做的时候，最风口的时刻，单微视这一个项目单月拿了60多个W的流水（包含达人50%的分成，以及将近4万块的增值税），流水月入百万的MCN机构老板我微信朋友圈也加着几个，只能说腾讯在力度方面真的狠上了。。。。</p>
<p>但是，投入巨大资源的微视在2019年并没有完成4000万DAU的目标，从腾讯PCG负责人任宇昕在年会上定2020年新目标为5000万DAU的目标来看，2019年的目标是远远未达标的。当然，微视最大的问题，不是缺增长，而是缺留存，快手与抖音的留存都在80%左右，而微视仅在43%上下徘徊，这就非常尴尬。在2020年，它大概率会被认定为一款只有防守价值的产品。</p>
<p><img src="https://cdn.kimtoli.com/Blog/post_img/20230408102045.jpg" alt="腾讯微视"></p>
<h3 id="曾多次对簿公堂，创始人曾朋友圈“互怼”"><a href="#曾多次对簿公堂，创始人曾朋友圈“互怼”" class="headerlink" title="曾多次对簿公堂，创始人曾朋友圈“互怼”"></a><strong>曾多次对簿公堂，创始人曾朋友圈“互怼”</strong></h3><p>2018年5月，抖音成为全球第一季度App Store下载量最高应用时，字节跳动创始人张一鸣在朋友圈写下这样一句话，“微信的借口封杀，微视的抄袭搬运，挡不住抖音的步伐。”腾讯创始人马化腾随即在下方回应称：“可以理解为诽谤。”</p>
<p>两名互联网大佬朋友圈公开互怼背后，是腾讯和字节之间“头腾大战”持续升级的一个缩影。特别是在短视频领域，当时占据杆位的抖音，对迟迟未能形成突破的腾讯，形成巨大压力。版权，成了双方交锋的一个发泄口。</p>
<p>公开资料显示，腾讯和抖音之间就视频版权有过多次纠纷。去年10月26日，西安市中级人民法院就《云南虫谷》案作出一审判决。法院认为，抖音平台上有大量用户对涉案作品实施侵权行为，需赔偿腾讯经济损失及合理费用3240余万元，刷新了全国法院网络影视版权案件赔偿纪录。</p>
<p>公开资料显示，《云南虫谷》为腾讯旗下企鹅影视出品的悬疑冒险网络剧，改编自天下霸唱小说《鬼吹灯之云南虫谷》。</p>
<p>2021年6月，腾讯向重庆一中院起诉，认为抖音平台内的用户上传内容侵害了《斗罗大陆》著作权，要求法院判令抖音赔偿经济损失并合理支出共计6160万元，此后又将索赔金额从6160万元提高到8亿元。</p>
<p>同年，字节跳动也在重庆市第一中级法院起诉腾讯，原因是腾讯视频上存在大量涉及电视剧《亮剑》的侵权视频，要求法院判令腾讯删除侵权视频、发布声明消除影响，并赔偿经济损失1000万元。</p>
<p><img src="https://cdn.kimtoli.com/Blog/post_img/20230408102155.jpg" alt="腾讯VS抖音"></p>
<h3 id="视频号和抖音的产品整合？"><a href="#视频号和抖音的产品整合？" class="headerlink" title="视频号和抖音的产品整合？"></a><strong>视频号和抖音的产品整合？</strong></h3><p>微信视频号的崛起，应该也为腾讯视频对外版权合作提供了更多底气。</p>
<p>眼下，视频号已成微信业务中当之无愧的“C位”。据腾讯最新财报，微信视频号的使用时长已达到朋友圈的1.2倍。数据显示，去年第四季度，视频号季度收入超过10亿，去年视频号直播带货销售增长800%，累计有收入的作者数对比2021年增长2.64倍。</p>
<p>腾讯CEO马化腾也曾在内部员工大会上的讲话中提到，微信事业群最亮眼的业务是视频号，基本上是全公司的希望。</p>
<p>不过，腾讯高管也在财报后的电话会议中坦言，相比竞争对手的短视频服务，视频号目前的广告数量仍处于相对落后的水平。相比抖音，腾讯视频号也尚未孵化出头部创作者。</p>
<p><img src="https://cdn.kimtoli.com/Blog/post_img/20230408102213.jpg" alt="视频号"></p>
<h3 id="长短视频平台大和解"><a href="#长短视频平台大和解" class="headerlink" title="长短视频平台大和解"></a><strong>长短视频平台大和解</strong></h3><p>可见的是，这并不是长短视频平台的首次牵手。去年7月19日，抖音集团和爱奇艺宣布达成合作。爱奇艺将向抖音集团授权其内容资产中拥有信息网络传播权及转授权的长视频内容，用于短视频创作，双方也对解说、混剪、拆条等短视频二创形态做出具体约定。</p>
<p>去年6月30日，快手曾宣布与乐视视频达成二创相关授权合作。这意味着快手创作者可以对乐视视频独家自制版权作品进行剪辑及二次创作，并发布在快手平台内。</p>
<p>“长短视频之间并非简单机械的竞争关系，更应是一种共生关系。且在当前大环境下，长短视频抱团合作也能取得不错效果。”浙江大学国际联合商学院数字经济与金融创新研究中心研究员盘和林告诉澎湃新闻记者。</p>
<p>在他看来，腾讯的利益在于通过短视频的二创强化自有视频IP的传播度，从而实现流量增长，提高IP播放量，夯实平台盈利能力，等于免费通过抖音短视频引流。而抖音则保留了二创这一关键的抖音短视频内容模式，为抖音平台上的自媒体争取到更多可以二创的IP内容。</p>
<p>“从商业模式分析，腾讯视频和抖音不是竞争对手。腾讯视频的营收来源依赖会员和广告，而抖音则通过电商和广告盈利，两者的客户重合度并不高。”艾媒咨询CEO张毅告诉澎湃新闻记者，“对于腾讯视频而言，抖音的短视频二创是很好的引流手段和工具。对于抖音而言，和腾讯合作也为创作者提供了更多改编空间。”</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>新媒体</category>
      </categories>
      <tags>
        <tag>新媒体</tag>
      </tags>
  </entry>
</search>
